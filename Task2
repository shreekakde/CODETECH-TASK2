class GradeTracker:
    def __init__(self):
        self.grades = {}
        self.gpa_scale = {
            "A": 4.0,
            "B": 3.0,
            "C": 2.0,
            "D": 1.0,
            "F": 0.0
        }
        
    def input_grades(self):
        while True:
            subject = input("Enter the subject or assignment (or type 'done' to finish): ")
            if subject.lower() == 'done':
                break
            try:
                grade = float(input(f"Enter the grade for {subject} (0-100): "))
                if 0 <= grade <= 100:
                    self.grades[subject] = grade
                else:
                    print("Please enter a valid grade between 0 and 100.")
            except ValueError:
                print("Please enter a valid number.")
    
    def calculate_average(self):
        if not self.grades:
            print("No grades entered.")
            return 0
        return sum(self.grades.values()) / len(self.grades)

    def determine_letter_grade(self, average):
        if average >= 90:
            return "A"
        elif average >= 80:
            return "B"
        elif average >= 70:
            return "C"
        elif average >= 60:
            return "D"
        else:
            return "F"
    
    def calculate_gpa(self, letter_grade):
        return self.gpa_scale.get(letter_grade, 0.0)
    
    def display_results(self):
        if not self.grades:
            print("No grades to display.")
            return
        average = self.calculate_average()
        letter_grade = self.determine_letter_grade(average)
        gpa = self.calculate_gpa(letter_grade)

        print("\n--- Grade Report ---")
        for subject, grade in self.grades.items():
            print(f"{subject}: {grade}")
        print(f"\nAverage Grade: {average:.2f}")
        print(f"Letter Grade: {letter_grade}")
        print(f"GPA: {gpa:.2f}")
        
def main():
    tracker = GradeTracker()
    tracker.input_grades()
    tracker.display_results()

if __name__ == "__main__":
    main()
